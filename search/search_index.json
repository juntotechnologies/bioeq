{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"BioEQ Documentation API Documentation init file for library __all__ = [ 'Crossover2x2' ] module-attribute __version__ = metadata . version ( 'bioeq' ) module-attribute Crossover2x2 A class to perform operations on a 2x2 crossover design dataset. Attributes: Name Type Description data DataFrame The input dataset. subject_col str Column name representing the subject identifier. seq_col str Column name representing the sequence. period_col str Column name representing the period. time_col str Column name representing time values. conc_col str Column name representing concentration values. form_col str Column name representing the formulation. simdata DataFrame A reference dataset loaded from a remote CSV. Source code in bioeq/crossover2x2.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 class Crossover2x2 : \"\"\" A class to perform operations on a 2x2 crossover design dataset. Attributes: data (pl.DataFrame): The input dataset. subject_col (str): Column name representing the subject identifier. seq_col (str): Column name representing the sequence. period_col (str): Column name representing the period. time_col (str): Column name representing time values. conc_col (str): Column name representing concentration values. form_col (str): Column name representing the formulation. simdata (pl.DataFrame): A reference dataset loaded from a remote CSV. \"\"\" def __init__ ( self , data : pl . DataFrame , subject_col : str , seq_col : str , period_col : str , time_col : str , conc_col : str , form_col : str , ) -> None : \"\"\" Initialize the Crossover2x2 object. Loads a reference CSV into simdata, sets dataset and column attributes, and validates the input data. Args: data (pl.DataFrame): Input dataset. subject_col (str): Column name for the subject identifier. seq_col (str): Column name for the sequence. period_col (str): Column name for the period. time_col (str): Column name for time values. conc_col (str): Column name for concentration values. form_col (str): Column name for the formulation. \"\"\" url1 : str = ( \"https://raw.githubusercontent.com/shaunporwal/bioeq/refs/heads/main/simdata/bioeq_simdata_1.csv\" ) self . simdata : pl . DataFrame = pl . read_csv ( source = url1 ) self . data : pl . DataFrame = data self . subject_col : str = subject_col self . seq_col : str = seq_col self . period_col : str = period_col self . time_col : str = time_col self . conc_col : str = conc_col self . form_col : str = form_col self . _validate_data () self . _validate_colvals () def _validate_data ( self ) -> None : \"\"\" Validate that the provided data is a Polars DataFrame. Raises: TypeError: If data is not an instance of pl.DataFrame. \"\"\" if not isinstance ( self . data , pl . DataFrame ): raise TypeError ( \"Data must be a Polars DataFrame\" ) def _validate_colvals ( self ) -> None : \"\"\" Validate that all required columns are present in the dataset. Raises: ValueError: If one or more required columns are missing. \"\"\" list_defined_columns : List [ str ] = [ self . subject_col , self . seq_col , self . period_col , self . time_col , self . conc_col , self . form_col , ] missing_columns : List [ str ] = [ col_name for col_name in list_defined_columns if col_name not in self . data . columns ] if missing_columns : raise ValueError ( f \"Required column(s) not found in dataset: { ', ' . join ( missing_columns ) } \" ) def calculate_auc ( self ) -> pl . DataFrame : \"\"\" Calculate the Area Under the Curve (AUC) for concentration over time. The method groups the data by subject, period, and formulation, aggregates the time and concentration columns, computes the AUC for each group using the trapezoidal rule, adds the computed AUC as a new column, and sorts the results. Returns: pl.DataFrame: A DataFrame with an additional 'AUC' column. \"\"\" grouped_df : pl . DataFrame = self . data . group_by ( [ self . subject_col , self . period_col , self . form_col ] ) . agg ( [ pl . col ( self . time_col ), pl . col ( self . conc_col ), ] ) auc_vals : List [ float ] = [ np . trapezoid ( row [ self . conc_col ], row [ self . time_col ]) for row in grouped_df . to_dicts () ] grouped_df = grouped_df . with_columns ( pl . Series ( \"AUC\" , auc_vals )) . sort ( [ pl . col ( self . subject_col ), pl . col ( self . period_col ), pl . col ( self . form_col )] ) return grouped_df calculate_auc () Calculate the Area Under the Curve (AUC) for concentration over time. The method groups the data by subject, period, and formulation, aggregates the time and concentration columns, computes the AUC for each group using the trapezoidal rule, adds the computed AUC as a new column, and sorts the results. Returns: Type Description DataFrame pl.DataFrame: A DataFrame with an additional 'AUC' column. Source code in bioeq/crossover2x2.py 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 def calculate_auc ( self ) -> pl . DataFrame : \"\"\" Calculate the Area Under the Curve (AUC) for concentration over time. The method groups the data by subject, period, and formulation, aggregates the time and concentration columns, computes the AUC for each group using the trapezoidal rule, adds the computed AUC as a new column, and sorts the results. Returns: pl.DataFrame: A DataFrame with an additional 'AUC' column. \"\"\" grouped_df : pl . DataFrame = self . data . group_by ( [ self . subject_col , self . period_col , self . form_col ] ) . agg ( [ pl . col ( self . time_col ), pl . col ( self . conc_col ), ] ) auc_vals : List [ float ] = [ np . trapezoid ( row [ self . conc_col ], row [ self . time_col ]) for row in grouped_df . to_dicts () ] grouped_df = grouped_df . with_columns ( pl . Series ( \"AUC\" , auc_vals )) . sort ( [ pl . col ( self . subject_col ), pl . col ( self . period_col ), pl . col ( self . form_col )] ) return grouped_df","title":"BioEQ Documentation"},{"location":"#bioeq-documentation","text":"","title":"BioEQ Documentation"},{"location":"#api-documentation","text":"init file for library","title":"API Documentation"},{"location":"#bioeq.__all__","text":"","title":"__all__"},{"location":"#bioeq.__version__","text":"","title":"__version__"},{"location":"#bioeq.Crossover2x2","text":"A class to perform operations on a 2x2 crossover design dataset. Attributes: Name Type Description data DataFrame The input dataset. subject_col str Column name representing the subject identifier. seq_col str Column name representing the sequence. period_col str Column name representing the period. time_col str Column name representing time values. conc_col str Column name representing concentration values. form_col str Column name representing the formulation. simdata DataFrame A reference dataset loaded from a remote CSV. Source code in bioeq/crossover2x2.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 class Crossover2x2 : \"\"\" A class to perform operations on a 2x2 crossover design dataset. Attributes: data (pl.DataFrame): The input dataset. subject_col (str): Column name representing the subject identifier. seq_col (str): Column name representing the sequence. period_col (str): Column name representing the period. time_col (str): Column name representing time values. conc_col (str): Column name representing concentration values. form_col (str): Column name representing the formulation. simdata (pl.DataFrame): A reference dataset loaded from a remote CSV. \"\"\" def __init__ ( self , data : pl . DataFrame , subject_col : str , seq_col : str , period_col : str , time_col : str , conc_col : str , form_col : str , ) -> None : \"\"\" Initialize the Crossover2x2 object. Loads a reference CSV into simdata, sets dataset and column attributes, and validates the input data. Args: data (pl.DataFrame): Input dataset. subject_col (str): Column name for the subject identifier. seq_col (str): Column name for the sequence. period_col (str): Column name for the period. time_col (str): Column name for time values. conc_col (str): Column name for concentration values. form_col (str): Column name for the formulation. \"\"\" url1 : str = ( \"https://raw.githubusercontent.com/shaunporwal/bioeq/refs/heads/main/simdata/bioeq_simdata_1.csv\" ) self . simdata : pl . DataFrame = pl . read_csv ( source = url1 ) self . data : pl . DataFrame = data self . subject_col : str = subject_col self . seq_col : str = seq_col self . period_col : str = period_col self . time_col : str = time_col self . conc_col : str = conc_col self . form_col : str = form_col self . _validate_data () self . _validate_colvals () def _validate_data ( self ) -> None : \"\"\" Validate that the provided data is a Polars DataFrame. Raises: TypeError: If data is not an instance of pl.DataFrame. \"\"\" if not isinstance ( self . data , pl . DataFrame ): raise TypeError ( \"Data must be a Polars DataFrame\" ) def _validate_colvals ( self ) -> None : \"\"\" Validate that all required columns are present in the dataset. Raises: ValueError: If one or more required columns are missing. \"\"\" list_defined_columns : List [ str ] = [ self . subject_col , self . seq_col , self . period_col , self . time_col , self . conc_col , self . form_col , ] missing_columns : List [ str ] = [ col_name for col_name in list_defined_columns if col_name not in self . data . columns ] if missing_columns : raise ValueError ( f \"Required column(s) not found in dataset: { ', ' . join ( missing_columns ) } \" ) def calculate_auc ( self ) -> pl . DataFrame : \"\"\" Calculate the Area Under the Curve (AUC) for concentration over time. The method groups the data by subject, period, and formulation, aggregates the time and concentration columns, computes the AUC for each group using the trapezoidal rule, adds the computed AUC as a new column, and sorts the results. Returns: pl.DataFrame: A DataFrame with an additional 'AUC' column. \"\"\" grouped_df : pl . DataFrame = self . data . group_by ( [ self . subject_col , self . period_col , self . form_col ] ) . agg ( [ pl . col ( self . time_col ), pl . col ( self . conc_col ), ] ) auc_vals : List [ float ] = [ np . trapezoid ( row [ self . conc_col ], row [ self . time_col ]) for row in grouped_df . to_dicts () ] grouped_df = grouped_df . with_columns ( pl . Series ( \"AUC\" , auc_vals )) . sort ( [ pl . col ( self . subject_col ), pl . col ( self . period_col ), pl . col ( self . form_col )] ) return grouped_df","title":"Crossover2x2"},{"location":"#bioeq.Crossover2x2.calculate_auc","text":"Calculate the Area Under the Curve (AUC) for concentration over time. The method groups the data by subject, period, and formulation, aggregates the time and concentration columns, computes the AUC for each group using the trapezoidal rule, adds the computed AUC as a new column, and sorts the results. Returns: Type Description DataFrame pl.DataFrame: A DataFrame with an additional 'AUC' column. Source code in bioeq/crossover2x2.py 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 def calculate_auc ( self ) -> pl . DataFrame : \"\"\" Calculate the Area Under the Curve (AUC) for concentration over time. The method groups the data by subject, period, and formulation, aggregates the time and concentration columns, computes the AUC for each group using the trapezoidal rule, adds the computed AUC as a new column, and sorts the results. Returns: pl.DataFrame: A DataFrame with an additional 'AUC' column. \"\"\" grouped_df : pl . DataFrame = self . data . group_by ( [ self . subject_col , self . period_col , self . form_col ] ) . agg ( [ pl . col ( self . time_col ), pl . col ( self . conc_col ), ] ) auc_vals : List [ float ] = [ np . trapezoid ( row [ self . conc_col ], row [ self . time_col ]) for row in grouped_df . to_dicts () ] grouped_df = grouped_df . with_columns ( pl . Series ( \"AUC\" , auc_vals )) . sort ( [ pl . col ( self . subject_col ), pl . col ( self . period_col ), pl . col ( self . form_col )] ) return grouped_df","title":"calculate_auc"}]}