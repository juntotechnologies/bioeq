name: CI Pipeline
on:
  push:
    branches:
      - main
    tags:
      - "*"

  pull_request:
jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - run: pip install poetry
      - run: |
          poetry install --with dev
          rm -rf .pytest_cache
          poetry run pip install -e .
          python -c "import bioeq; print(bioeq.__file__)"
      - run: poetry run pytest -v

  publish-to-testpypi:
    if: github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: pip install poetry
      - run: poetry config repositories.testpypi https://test.pypi.org/legacy/
      - run: poetry config pypi-token.testpypi ${{ secrets.TEST_PYPI_API_TOKEN }}
      - run: |
          PACKAGE_NAME=$(poetry version | awk '{print $1}')
          echo "PACKAGE_NAME=${PACKAGE_NAME}" >> $GITHUB_ENV
      - run: |
          VERSION=$(poetry version -s)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
      - run: |
          RESPONSE=$(curl -s https://test.pypi.org/pypi/${{ env.PACKAGE_NAME }}/json || echo "error")
          if [ "$RESPONSE" != "error" ] && echo "$RESPONSE" | jq -r '.releases | keys' | grep -q "\"${VERSION}\""; then
            echo "Version ${VERSION} already exists on Test PyPI."
            echo "skip=true" >> $GITHUB_ENV
          else
            echo "Version ${VERSION} does not exist on Test PyPI. Proceeding with publish."
            echo "skip=false" >> $GITHUB_ENV
          fi
      - if: env.skip != 'true'
        run: |
          poetry install --only main
          poetry build
          poetry publish --repository testpypi

  publish-to-pypi:
    if: startsWith(github.ref, 'refs/tags/')
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: pip install poetry
      - run: poetry config repositories.pypi https://upload.pypi.org/legacy/
      - run: poetry config pypi-token.pypi ${{ secrets.PYPI_API_TOKEN }}
      - run: |
          PACKAGE_NAME=$(poetry version | awk '{print $1}')
          echo "PACKAGE_NAME=${PACKAGE_NAME}" >> $GITHUB_ENV
      - run: |
          VERSION=$(poetry version -s)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
      - run: |
          RESPONSE=$(curl -s https://pypi.org/pypi/${{ env.PACKAGE_NAME }}/json || echo "error")
          if [ "$RESPONSE" != "error" ] && echo "$RESPONSE" | jq -r '.releases | keys' | grep -q "\"${VERSION}\""; then
            echo "Version ${VERSION} already exists on PyPI."
            echo "skip=true" >> $GITHUB_ENV
          else
            echo "Version ${VERSION} does not exist on PyPI. Proceeding with publish."
            echo "skip=false" >> $GITHUB_ENV
          fi
      - if: env.skip != 'true'
        run: |
          poetry install --only main
          poetry build
          poetry publish --repository pypi
